pipeline {
    agent any
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'USER_NAME', value: '$.pull_request.user.login', expressionType: 'JSONPath'],
                [key: 'IF_MERGED', value: '$.pull_request.merged', expressionType: 'JSONPath'],
                [key: 'BASE_BRANCH', value: '$.pull_request.base.ref', expressionType: 'JSONPath'],
                [key: 'LABEL', value: '$.pull_request.labels[*].name', expressionType: 'JSONPath']
            ],
            causeString: 'Triggered by GitHub Pull Request by ${USER_NAME}',
            token: 'jamjamnow-be-api-service',
            printContributedVariables: false,
            printPostContent: false,
            regexpFilterText: '$IF_MERGED $BASE_BRANCH $LABEL',
            regexpFilterExpression: '(?=.*true)(?=.*develop)(?=.*backend-api-service)'
        )
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    // 빌드 설명 설정
                    currentBuild.description = "Merge requested by: ${env.USER_NAME}"
                }
            }
        }

        stage('Verify Webhook Payload') {
            steps {
                script {
                    echo "User Name: ${env.USER_NAME}"
                    echo "If Merged: ${env.IF_MERGED}"
                    echo "Base Branch: ${env.BASE_BRANCH}"
                    echo "Label: ${env.LABEL}"
                }
            }
        }

        // 빌드 단계: JAR 파일을 생성하고 아티팩트로 저장
        stage('Build JAR') {
            steps {
                dir('BackEnd') {
                    sh 'chmod +x ./gradlew'
                    sh './gradlew :Service:api-service:bootJar'
                }
            }
            post {
                success {
                    echo 'Build succeeded.'
                    archiveArtifacts artifacts: 'Service/api-service/build/libs/*.jar', allowEmptyArchive: false
                }
                failure {
                    echo 'Build failed.'
                }
            }
        }

        stage('Transfer and Deploy on BackEnd Server') {
            steps {
                script {
                    sshPublisher(
                        publishers: [
                            sshPublisherDesc(
                                configName: 'BackEnd Server SSH', // Jenkins Web UI에서 Publish Over SSH에서 설장한 SSH Server 이름
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: '''
                                            BackEnd/Service/api-service/build/libs/*.jar,
                                            BackEnd/Service/api-service/api-service.Dockerfile,
                                            BackEnd/Service/api-service/docker-compose-api-service.yml,
                                            env/.env-api-service-prod
                                        ''', // BackEnd Server로 전송할 파일
                                        remoteDirectory: 'deploy/jamjamnow/backend-app', // BackEnd Server에서 작업할 디렉터리
                                        execCommand: '''
                                            cd ~/deploy/jamjamnow/backend-app
                                            mkdir -p env
                                            mv .env-api-service-prod env/.env-api-service-prod
                                            docker compose -f docker-compose-api-service.yml --env-file env/.env-api-service-prod up -d --build
                                        ''' // BackEnd Server에서 실행할 명령어
                                    )
                                ],
                                verbose: true // 상세 로그 활성화
                            )
                        ]
                    )
                }
            }
        }
    }

    post {
        always {
            cleanWs() // 작업 공간 정리
        }
    }
}